// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication2Shelf_Life.Models;

#nullable disable

namespace WebApplication2Shelf_Life.Migrations
{
    [DbContext(typeof(DBcontext))]
    [Migration("20251030135754_OneToOneMigration")]
    partial class OneToOneMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WebApplication2Shelf_Life.Models.Book", b =>
                {
                    b.Property<int>("BookID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookID"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Edition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Publisher")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookID");

                    b.ToTable("Book");
                });

            modelBuilder.Entity("WebApplication2Shelf_Life.Models.Borrow", b =>
                {
                    b.Property<int>("BorrowID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BorrowID"));

                    b.Property<DateTime>("BorrowStartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("BorrowedQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RequestID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("BorrowID");

                    b.HasIndex("RequestID")
                        .IsUnique();

                    b.ToTable("Borrow");
                });

            modelBuilder.Entity("WebApplication2Shelf_Life.Models.Delivery", b =>
                {
                    b.Property<int>("DeliveryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeliveryID"));

                    b.Property<string>("CurrentLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DeliveredAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DeliveryFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("DeliveryStatus")
                        .HasColumnType("int");

                    b.Property<string>("FromLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestID")
                        .HasColumnType("int");

                    b.Property<string>("ToLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DeliveryID");

                    b.HasIndex("RequestID")
                        .IsUnique();

                    b.ToTable("Delivery");
                });

            modelBuilder.Entity("WebApplication2Shelf_Life.Models.Listings", b =>
                {
                    b.Property<int>("ListingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ListingID"));

                    b.Property<int>("AvailabilityStatus")
                        .HasColumnType("int");

                    b.Property<int>("AvailableQuantity")
                        .HasColumnType("int");

                    b.Property<int>("BookID")
                        .HasColumnType("int");

                    b.Property<int>("Condition")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDonatable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSwappable")
                        .HasColumnType("bit");

                    b.Property<string>("LocationNotes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OfferedListingID")
                        .HasColumnType("int");

                    b.Property<string>("PhotoURLs")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("RatingID")
                        .HasColumnType("int");

                    b.Property<int?>("SwapID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ListingID");

                    b.HasIndex("BookID");

                    b.HasIndex("OfferedListingID");

                    b.HasIndex("RatingID")
                        .IsUnique();

                    b.HasIndex("SwapID");

                    b.HasIndex("UserID");

                    b.ToTable("Listings");
                });

            modelBuilder.Entity("WebApplication2Shelf_Life.Models.Message", b =>
                {
                    b.Property<int>("MessageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageID"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<int>("ReceiverID")
                        .HasColumnType("int");

                    b.Property<int>("RequestID")
                        .HasColumnType("int");

                    b.Property<int>("SenderID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("MessageID");

                    b.HasIndex("ReceiverID");

                    b.HasIndex("RequestID");

                    b.HasIndex("SenderID");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("WebApplication2Shelf_Life.Models.Notification", b =>
                {
                    b.Property<int>("NotificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationID"));

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<double>("new_column")
                        .HasColumnType("float");

                    b.HasKey("NotificationID");

                    b.HasIndex("UserID");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("WebApplication2Shelf_Life.Models.Rating", b =>
                {
                    b.Property<int>("RatingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RatingID"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ListingID")
                        .HasColumnType("int");

                    b.Property<int>("RaterID")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("RatingID");

                    b.HasIndex("RaterID");

                    b.ToTable("Rating");
                });

            modelBuilder.Entity("WebApplication2Shelf_Life.Models.Request", b =>
                {
                    b.Property<int>("RequestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestID"));

                    b.Property<int>("BorrowID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DeliveryID")
                        .HasColumnType("int");

                    b.Property<int>("ListingID")
                        .HasColumnType("int");

                    b.Property<int>("RequestType")
                        .HasColumnType("int");

                    b.Property<int>("RequestedQuantity")
                        .HasColumnType("int");

                    b.Property<int>("RequesterID")
                        .HasColumnType("int");

                    b.Property<long>("Status")
                        .HasColumnType("bigint");

                    b.Property<int>("SwapID")
                        .HasColumnType("int");

                    b.HasKey("RequestID");

                    b.HasIndex("ListingID");

                    b.HasIndex("RequesterID");

                    b.ToTable("Request");
                });

            modelBuilder.Entity("WebApplication2Shelf_Life.Models.Subscription", b =>
                {
                    b.Property<int>("SubscriptionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubscriptionID"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("MonthlyFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("SubscriptionID");

                    b.HasIndex("UserID");

                    b.ToTable("Subscription");
                });

            modelBuilder.Entity("WebApplication2Shelf_Life.Models.Swap", b =>
                {
                    b.Property<int>("SwapID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SwapID"));

                    b.Property<string>("NegotiationNotes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("OfferedListingID")
                        .HasColumnType("bigint");

                    b.Property<int>("OfferedQuantity")
                        .HasColumnType("int");

                    b.Property<int>("RequestID")
                        .HasColumnType("int");

                    b.HasKey("SwapID");

                    b.HasIndex("RequestID")
                        .IsUnique();

                    b.ToTable("Swap");
                });

            modelBuilder.Entity("WebApplication2Shelf_Life.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ProfileDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProfilePhotoURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("UserID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("WebApplication2Shelf_Life.Models.Borrow", b =>
                {
                    b.HasOne("WebApplication2Shelf_Life.Models.Request", "Request")
                        .WithOne("Borrow")
                        .HasForeignKey("WebApplication2Shelf_Life.Models.Borrow", "RequestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("WebApplication2Shelf_Life.Models.Delivery", b =>
                {
                    b.HasOne("WebApplication2Shelf_Life.Models.Request", "Request")
                        .WithOne("Delivery")
                        .HasForeignKey("WebApplication2Shelf_Life.Models.Delivery", "RequestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("WebApplication2Shelf_Life.Models.Listings", b =>
                {
                    b.HasOne("WebApplication2Shelf_Life.Models.Book", "Book")
                        .WithMany("listings")
                        .HasForeignKey("BookID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication2Shelf_Life.Models.Swap", "offerd")
                        .WithMany()
                        .HasForeignKey("OfferedListingID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication2Shelf_Life.Models.Rating", "Rating")
                        .WithOne("Listings")
                        .HasForeignKey("WebApplication2Shelf_Life.Models.Listings", "RatingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication2Shelf_Life.Models.Swap", null)
                        .WithMany("listings")
                        .HasForeignKey("SwapID");

                    b.HasOne("WebApplication2Shelf_Life.Models.User", "User")
                        .WithMany("listings")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Rating");

                    b.Navigation("User");

                    b.Navigation("offerd");
                });

            modelBuilder.Entity("WebApplication2Shelf_Life.Models.Message", b =>
                {
                    b.HasOne("WebApplication2Shelf_Life.Models.User", "Receiver")
                        .WithMany("ReceivedMessages")
                        .HasForeignKey("ReceiverID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebApplication2Shelf_Life.Models.Request", "Request")
                        .WithMany("Messages")
                        .HasForeignKey("RequestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication2Shelf_Life.Models.User", "Sender")
                        .WithMany("SentMessages")
                        .HasForeignKey("SenderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Request");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("WebApplication2Shelf_Life.Models.Notification", b =>
                {
                    b.HasOne("WebApplication2Shelf_Life.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication2Shelf_Life.Models.Rating", b =>
                {
                    b.HasOne("WebApplication2Shelf_Life.Models.User", "Rater")
                        .WithMany("Ratings")
                        .HasForeignKey("RaterID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Rater");
                });

            modelBuilder.Entity("WebApplication2Shelf_Life.Models.Request", b =>
                {
                    b.HasOne("WebApplication2Shelf_Life.Models.Listings", "Listings")
                        .WithMany("requests")
                        .HasForeignKey("ListingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication2Shelf_Life.Models.User", "User")
                        .WithMany("requests")
                        .HasForeignKey("RequesterID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Listings");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication2Shelf_Life.Models.Subscription", b =>
                {
                    b.HasOne("WebApplication2Shelf_Life.Models.User", "User")
                        .WithMany("subscriptions")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication2Shelf_Life.Models.Swap", b =>
                {
                    b.HasOne("WebApplication2Shelf_Life.Models.Request", "Request")
                        .WithOne("Swap")
                        .HasForeignKey("WebApplication2Shelf_Life.Models.Swap", "RequestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("WebApplication2Shelf_Life.Models.Book", b =>
                {
                    b.Navigation("listings");
                });

            modelBuilder.Entity("WebApplication2Shelf_Life.Models.Listings", b =>
                {
                    b.Navigation("requests");
                });

            modelBuilder.Entity("WebApplication2Shelf_Life.Models.Rating", b =>
                {
                    b.Navigation("Listings")
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplication2Shelf_Life.Models.Request", b =>
                {
                    b.Navigation("Borrow")
                        .IsRequired();

                    b.Navigation("Delivery")
                        .IsRequired();

                    b.Navigation("Messages");

                    b.Navigation("Swap")
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplication2Shelf_Life.Models.Swap", b =>
                {
                    b.Navigation("listings");
                });

            modelBuilder.Entity("WebApplication2Shelf_Life.Models.User", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("Ratings");

                    b.Navigation("ReceivedMessages");

                    b.Navigation("SentMessages");

                    b.Navigation("listings");

                    b.Navigation("requests");

                    b.Navigation("subscriptions");
                });
#pragma warning restore 612, 618
        }
    }
}
